000000000 | NOP:                           | 00000 0011 00111 0 0 0000 0000 0 0 0 0 1100 0 | -
000000001 | CLR Rd: (clear reg)            | 00001 0011 00111 0 0 1000 0000 0 1 0 1 1100 0 | Rn = 0, jump to 6 + int
000000010 | EI: (F OR 8)                   | 00010 0000 00100 0 0 0100 1000 0 1 0 1 0010 0 | F = F NOR 8
000000011 | DI: (F AND 7)                  | 00011 0000 00101 0 0 0100 0100 0 1 0 0 0010 0 | F = F NOR F = NOT F
000000100 | (EI)                           | 00100 0000 00110 0 0 0100 0100 0 1 0 0 0010 0 | F = F NOR F = NOT => F = F OR 8/kein Int.
000000101 | (DI)                           | 00101 0000 00110 0 0 0100 1000 0 1 0 1 0010 0 | F = F NOR 8 => F = F AND 7 / kein Int.
000000110 | no int:                        | 00110 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
000000111 | int:                           | 00111 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 16
000001000 |                                |                                               |
000001001 |                                |                                               |
000001010 |                                |                                               |
000001011 |                                |                                               |
000001100 |                                |                                               |
000001101 |                                |                                               |
000001110 |                                |                                               |
000001111 |                                |                                               |
000010000 | PUSH FR: DEC SP                | 10000 0000 10001 0 0 0101 1111 0 1 0 1 0100 0 | SP = SP - 1 (SP: R2)
000010001 | ... MOV (SP),FR                | 10001 0000 10010 1 1 0101 0100 0 0 0 0 1100 0 | (SP) = FR = R4
000010010 | PUSH PC: DEC SP                | 10010 0000 10011 0 0 0101 1111 0 1 0 1 0100 0 | SP = SP - 1 (SP: R2)
000010011 | ... MOV (SP),PC                | 10011 0000 10100 1 1 0101 0011 0 0 0 0 1100 0 | (SP) = PC = R3
000010100 | DI                             | 10100 0000 10101 0 0 0100 0100 0 1 0 0 0010 0 | FR = FR NOR FR = NOT FR
000010101 | ... DI                         | 10101 0000 10110 0 0 0100 1000 0 1 0 1 0010 0 | FR = FR NOR 8 => FR = FR AND 7
000010110 | JUMP 2: MOV PC,2               | 10110 0000 10111 0 0 0011 0010 0 1 0 1 1100 0 | PC = 2
000010111 | next opcode                    | 10111 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
000011000 |                                |                                               |
000011001 |                                |                                               |
000011010 |                                |                                               |
000011011 |                                |                                               |
000011100 |                                |                                               |
000011101 |                                |                                               |
000011110 |                                |                                               |
000011111 |                                |                                               |
000100000 | PUSH Rn: MOV R6,Rn             | 00000 0000 00100 0 0 1000 0110 1 1 0 0 0001 0 | R6 = Rn, jump to 4
000100001 | POP Rn: MOV R6,(SP)            | 00001 0000 00110 0 1 0101 0110 1 1 1 0 0001 0 | R6 = (SP), jump to 6
000100010 | PUSH F: MOV R6,R4              | 00010 0000 00100 0 0 0100 0110 1 1 0 0 0001 0 | R6 = F = R4, jump to 4
000100011 | POP F: MOV R4,(SP)             | 00011 0000 00111 0 1 0101 0100 1 1 1 0 0001 0 | F = (SP), jump to 7
000100100 | PUSH: DEC SP                   | 00100 0000 00101 0 0 0101 1111 0 1 0 1 0100 0 | SP = SP - 1
000100101 | MOV (SP),R6                    | 00101 0011 01001 1 1 0101 0110 0 0 0 0 1100 0 | (SP) = R6, jump to 8+int
000100110 | POP: MOV Rd,R6                 | 00110 0000 00111 0 0 1000 0110 0 1 0 0 1100 0 | Rn = R6
000100111 | INC SP                         | 00111 0011 01001 0 0 0101 0001 0 1 0 1 0100 0 | SP = SP + 1, jump to 8+int
000101000 | no int:                        | 01000 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
000101001 | int:                           | 01001 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
000101010 |                                |                                               |
000101011 |                                |                                               |
000101100 |                                |                                               |
000101101 |                                |                                               |
000101110 |                                |                                               |
000101111 |                                |                                               |
000110000 | MOV Rd,R6                      | 10000 0011 01001 0 0 1000 0110 0 1 0 0 1100 0 | Rd = R6
000110001 | MOV (Rd),R6                    | 10001 0011 01001 1 1 1000 0110 0 0 0 0 1100 0 | (Rd) = R6
000110010 | [MOV (Rd+),R6]                 | 10010 0000 10101 1 1 1000 0110 0 0 0 0 1100 0 | (Rd) = R6
000110011 | [MOV ((Rd+)),R6]               | 10011 0000 10100 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
000110100 | MOV (R7),R6                    | 10100 0000 10101 1 1 0111 0110 0 0 0 0 1100 0 | (R7) = R6 => ((Rd)) = R6
000110101 | INC Rd                         | 10101 0011 01001 0 0 1000 0001 0 1 0 1 0100 0 | Rd = Rd + 1
000110110 |                                |                                               |
000110111 |                                |                                               |
000111000 |                                |                                               |
000111001 |                                |                                               |
000111010 |                                |                                               |
000111011 |                                |                                               |
000111100 |                                |                                               |
000111101 |                                |                                               |
000111110 |                                |                                               |
000111111 |                                |                                               |
001000000 | JR cond,offs:                  | 00000 0001 00100 0 0 0000 0000 0 0 0 0 1100 0 | jump to 4+cond
001000001 | (JR cond,offs):                | 00001 0001 00100 0 0 0000 0000 0 0 0 0 1100 0 | jump to 4+cond
001000010 | CALL adr: DEC SP               | 00010 0000 00110 0 0 0101 1111 0 1 0 1 0100 0 | SP = SP - 1
001000011 | RETI: POP PC                   | 00011 0000 01010 0 1 0101 0011 1 1 1 0 0001 0 | PC = (SP): R3 = (R5)
001000100 | JR, condition nicht erfüllt:   | 00100 0011 01111 0 0 0011 0001 0 1 0 1 0100 0 | PC= PC + 1 (offs überspringen)
001000101 | JR, condition erfüllt:         | 00101 0011 01111 0 1 0011 0011 0 1 1 0 0101 0 | PC = PC + (PC) + 1
001000110 | CALL: MOV R6,PC                | 00110 0000 00111 0 0 0011 0110 1 1 0 0 0001 0 | R6 = PC
001000111 | ... INC PC                     | 00111 0000 01000 0 0 0011 0001 0 1 0 1 0100 0 | PC= PC + 1 (Rücksprung hinter adr)
001001000 | ... PUSH PC                    | 01000 0000 01001 1 1 0101 0011 0 0 0 0 1100 0 | (SP) = PC
001001001 | ... MOV PC,(R6)                | 01001 0011 01111 0 1 0110 0011 1 1 1 0 0001 0 | PC = (R6) = adr
001001010 | RETI: POP PC: INC SP           | 01010 0000 01011 0 0 0101 0001 0 1 0 1 0100 0 | SP = SP + 1
001001011 | ... POP FR                     | 01011 0000 01100 0 1 0101 0100 1 1 1 0 0001 0 | FR = (SP): R4 = (R5) (dadurch auch EI)
001001100 | ... INC SP                     | 01100 0000 01110 0 0 0101 0001 0 1 0 1 0100 0 | SP = SP + 1, kein INT zulassen
001001101 | - frei -                       | 01101 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 |
001001110 | no int:                        | 01110 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
001001111 | int:                           | 01111 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
001010000 | Rd: MOV R7,Rd                  | 10000 0000 10110 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
001010001 | (Rd): MOV R7,(Rd)              | 10001 0000 10110 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001010010 | (Rd+): MOV R7,(Rd)             | 10010 0000 10101 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001010011 | ((Rd+)): MOV R7,(Rd)           | 10011 0000 10100 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001010100 | MOV R7,(R7)                    | 10100 0000 10101 0 1 0111 0111 1 1 1 0 0001 0 | R7 = (R7) = ((Rd))
001010101 | INC Rd                         | 10101 0000 10110 0 0 1000 0001 0 1 0 1 0100 0 |
001010110 | COM R6                         | 10110 0000 10111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
001010111 | ADD R7,R6,1                    | 10111 0011 01111 0 0 0110 0111 0 0 0 0 0101 1 | Rd = Rd + ~Rs + 1 = Rd - Rs
001011000 |                                |                                               |
001011001 |                                |                                               |
001011010 |                                |                                               |
001011011 |                                |                                               |
001011100 |                                |                                               |
001011101 |                                |                                               |
001011110 |                                |                                               |
001011111 |                                |                                               |
001100000 | COM Rn:                        | 00000 0011 00111 0 0 1000 0000 0 1 0 1 0010 1 | Rn = Rn NOR 0
001100001 | NEG Rn: COM Rn                 | 00001 0000 00100 0 0 1000 0000 0 1 0 1 0010 0 | Rn = Rn NOR 0
001100010 | LSR Rn:                        | 00010 0011 00111 0 0 1000 0000 0 1 0 0 1000 1 |
001100011 | ASR Rn:                        | 00011 0011 00111 0 0 1000 0000 0 1 0 0 1011 1 |
001100100 | NEG: INC Rn                    | 00100 0011 00111 0 0 1000 0001 0 1 0 1 0100 1 | Rn = Rn + 1
001100101 | (frei)                         | 00101 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 |
001100110 | no int:                        | 00110 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
001100111 | int:                           | 00111 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
001101000 |                                |                                               |
001101001 |                                |                                               |
001101010 |                                |                                               |
001101011 |                                |                                               |
001101100 |                                |                                               |
001101101 |                                |                                               |
001101110 |                                |                                               |
001101111 |                                |                                               |
001110000 | Rd: MOV R7,Rd                  | 10000 0000 10110 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
001110001 | (Rd): MOV R7,(Rd)              | 10001 0000 10110 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001110010 | (Rd+): MOV R7,(Rd)             | 10010 0000 10101 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001110011 | ((Rd+)): MOV R7,(Rd)           | 10011 0000 10100 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
001110100 | MOV R7,(R7)                    | 10100 0000 10101 0 1 0111 0111 1 1 1 0 0001 0 | R7 = (R7) = ((Rd))
001110101 | INC Rd                         | 10101 0000 10110 0 0 1000 0001 0 1 0 1 0100 0 |
001110110 | COM R6                         | 10110 0000 10111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
001110111 | COM R7                         | 10111 0000 11000 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~Rd
001111000 | NOR R7,R6                      | 11000 0011 00111 0 0 0110 0111 0 0 0 0 0010 1 | R7 = ~Rd NOR ~Rs = Rd AND Rs
001111001 |                                |                                               |
001111010 |                                |                                               |
001111011 |                                |                                               |
001111100 |                                |                                               |
001111101 |                                |                                               |
001111110 |                                |                                               |
001111111 |                                |                                               |
010000000 | RRC Rn:                        | 00000 0011 00111 0 0 1000 0000 0 1 0 0 1010 1 |
010000001 | INC Rn:                        | 00001 0011 00111 0 0 1000 0001 0 1 0 1 0100 1 |
010000010 | TST Rn:                        | 00010 0011 00111 0 0 1000 0000 0 0 0 0 0001 1 | Rn in ALU, Flags setzen
010000011 | frei: unbekannter opcode       | 00011 0000 00011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
010000100 | (frei)                         | 00100 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 |
010000101 | (frei)                         | 00101 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 |
010000110 | no int:                        | 00110 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
010000111 | int:                           | 00111 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
010001000 |                                |                                               |
010001001 |                                |                                               |
010001010 |                                |                                               |
010001011 |                                |                                               |
010001100 |                                |                                               |
010001101 |                                |                                               |
010001110 |                                |                                               |
010001111 |                                |                                               |
010010000 | LDSP: MOV R5, R6               | 10000 0011 00111 0 0 0101 0110 0 1 0 0 1100 1 | SP = src
010010001 | LDFR: MOV R4,R6                | 10001 0011 00111 0 0 0100 0110 0 1 0 0 1100 1 | FR = src
010010010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 |
010010011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 |
010010100 |                                |                                               |
010010101 |                                |                                               |
010010110 |                                |                                               |
010010111 |                                |                                               |
010011000 |                                |                                               |
010011001 |                                |                                               |
010011010 |                                |                                               |
010011011 |                                |                                               |
010011100 |                                |                                               |
010011101 |                                |                                               |
010011110 |                                |                                               |
010011111 |                                |                                               |
010100000 | DEC Rd:                        | 00000 0011 01101 0 0 1000 1110 0 1 0 1 0101 1 | Rd = Rd - 1 (A+B+1, damit CY richtig)
010100001 | DEC (Rd):                      | 00001 0000 00100 0 1 1000 0110 1 1 1 0 0001 0 | R6 = (Rd)
010100010 | DEC (Rd+):                     | 00010 0000 00110 0 1 1000 0110 1 1 1 0 0001 0 | R6 = (Rd)
010100011 | DEC ((Rd+)): MOV R7,(Rd)       | 00011 0000 01000 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
010100100 | DEC R6                         | 00100 0000 00101 0 0 0110 1110 0 1 0 1 0101 1 | R6 = R6 - 1: decrement
010100101 | MOV (Rd),R6                    | 00101 0011 01101 1 1 1000 0110 0 0 0 0 1100 0 | (Rd) = R6: Ergebnis schreiben
010100110 | DEC R6                         | 00110 0000 00111 0 0 0110 1110 0 1 0 1 0101 1 | R6 = R6 - 1: decrement
010100111 | MOV (Rd),R6                    | 00111 0000 01011 1 1 1000 0110 0 0 0 0 1100 0 | (Rd) = R6: Ergebnis schreiben
010101000 | MOV R6,(R7)                    | 01000 0000 01001 0 1 0111 0110 1 1 1 0 0001 0 | R6 = (R7) = ((Rd))
010101001 | DEC R6                         | 01001 0000 01010 0 0 0110 1110 0 1 0 1 0101 1 | R6 = R6 - 1
010101010 | MOV (R7),R6                    | 01010 0000 01011 1 1 0111 0110 0 0 0 0 1100 0 | ((Rd)) = R6: Ergebnis schreiben
010101011 | INC Rd                         | 01011 0011 01101 0 0 1000 0001 0 1 0 1 0100 0 | autoincrement
010101100 | no int:                        | 01100 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
010101101 | int:                           | 01101 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
010101110 |                                |                                               |
010101111 |                                |                                               |
010110000 | Rd: NOR R6,Rd                  | 10000 0000 10100 0 0 1000 0110 1 1 0 0 0010 0 | R6 = Rs NOR Rd
010110001 | (Rd): NOR R6,(Rd)              | 10001 0000 10110 0 1 1000 0110 1 1 1 0 0010 0 | R6 = Rs NOR (Rd)
010110010 | (Rd+): NOR R6,(Rd)             | 10010 0000 11000 0 1 1000 0110 1 1 1 0 0010 0 | R6 = Rs NOR (Rd)
010110011 | ((Rd+)): MOV R7,(Rd)           | 10011 0000 11011 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd) = Adr. des 2. Wertes
010110100 | Rd: COM R6                     | 10100 0000 10101 0 0 0110 0110 0 1 0 0 0010 0 | R6 = Rs OR Rd
010110101 | ... MOV Rd,R6                  | 10101 0011 01101 0 0 1000 0110 0 1 0 0 1100 1 | Rd = R7
010110110 | (Rd): COM R6                   | 10110 0000 10111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = Rs OR (Rd)
010110111 | ... MOV (Rd),R6                | 10111 0011 01101 1 1 1000 0110 0 0 0 0 1100 1 | (Rd) = R6
010111000 | (Rd+): COM R6                  | 11000 0000 11001 0 0 0110 0110 0 1 0 0 0010 0 | R6 = Rs OR (Rd)
010111001 | ... MOV (Rd),R6                | 11001 0000 11010 1 1 1000 0110 0 0 0 0 1100 1 | (Rd) = R6
010111010 | ... INC Rd                     | 11010 0011 01101 0 0 1000 0001 0 1 0 1 0100 0 | Rd = Rd+1
010111011 | ((Rd+)): NOR R6,(R7)           | 11011 0000 11100 0 1 0111 0110 1 1 1 0 0010 0 | R6 = Rs NOR ((Rd))
010111100 | ... COM R6                     | 11100 0000 11101 0 0 0110 0110 0 1 0 0 0010 0 | R6 = Rs OR ((Rd))
010111101 | ... MOV (R7),R6                | 11101 0000 11110 1 1 0111 0110 0 0 0 0 1100 1 | ((Rd)) = R6
010111110 | ... INC Rd                     | 11110 0011 01101 0 0 1000 0001 0 1 0 1 0100 0 | Rd = Rd+1
010111111 |                                |                                               |
011000000 | ADD Rd, Rs:                    | 00000 0011 00101 0 0 1000 1000 0 1 0 0 0100 1 |
011000001 | (ADD Rd, Rs):                  | 00001 0011 00101 0 0 1000 1000 0 1 0 0 0100 1 | Code ist 4 mal notwendig, da OP11,OP10 auch
011000010 | (ADD Rd, Rs):                  | 00010 0011 00101 0 0 1000 1000 0 1 0 0 0100 1 | für Einsprung in Mikroprogramm verwendet
011000011 | (ADD Rd, Rs):                  | 00011 0011 00101 0 0 1000 1000 0 1 0 0 0100 1 | wird
011000100 | no int:                        | 00100 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
011000101 | int:                           | 00101 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
011000110 |                                |                                               |
011000111 |                                |                                               |
011001000 |                                |                                               |
011001001 |                                |                                               |
011001010 |                                |                                               |
011001011 |                                |                                               |
011001100 | (Rd+): COM R7                  | 01100 0000 01101 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~Rd
011001101 | ... NOR R7,R6                  | 01101 0000 01110 0 0 0111 0110 0 1 0 0 0010 0 | R7 = ~Rs AND Rd
011001110 | ... MOV (Rd),R7                | 01110 0000 01111 1 1 1000 0111 0 0 0 0 1100 1 | (Rd) = ~Rs AND Rd
011001111 | ... INC Rd                     | 01111 0011 00101 0 0 1000 0001 0 1 0 1 0100 0 | Rd = Rd + 1
011010000 | Rd: MOV R7,Rd                  | 10000 0000 10100 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
011010001 | (Rd): MOV R7,(Rd)              | 10001 0000 10111 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
011010010 | (Rd+): MOV R7,(Rd)             | 10010 0000 01100 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd) = Zieladresse
011010011 | ((Rd+)): MOV R7,(Rd)           | 10011 0000 11010 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rd)
011010100 | Rd: COM R7                     | 10100 0000 10101 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~Rd
011010101 | ... NOR R7,R6                  | 10101 0000 10110 0 0 0111 0110 0 1 0 0 0010 0 | R7 = ~Rs AND Rd
011010110 | ... MOV Rd,R7                  | 10110 0011 00101 0 0 1000 0111 0 1 0 0 1100 1 | Rd = ~Rs AND Rd
011010111 | (Rd): COM R7                   | 10111 0000 11000 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~(Rd)
011011000 | ... NOR R7,R6                  | 11000 0000 11001 0 0 0111 0110 0 1 0 0 0010 0 | R7 = ~Rs AND (Rd)
011011001 | ... MOV (Rd),R7                | 11001 0011 00101 1 1 1000 0111 0 0 0 0 1100 1 | (Rd) = ~Rs AND (Rd)
011011010 | ((Rd+)): MOV R7,(R7)           | 11010 0000 11011 0 1 0111 0111 1 1 1 0 0001 0 | R7 = ((Rd))
011011011 | ... COM R7                     | 11011 0000 11100 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~((Rd))
011011100 | ... NOR R7,R6                  | 11100 0000 11101 0 0 0111 0110 0 1 0 0 0010 0 | R7 = ~Rs AND ((Rd))
011011101 | ... MOV R6,(Rd)                | 11101 0000 11110 0 1 1000 0110 1 1 1 0 0001 0 | R6 = (Rd) = Zieladresse
011011110 | ... MOV (R6),R7                | 11110 0000 11111 1 1 0110 0111 0 0 0 0 1100 1 | ((Rd)) = ~Rs AND ((Rd))
011011111 | ... INC Rd                     | 11111 0011 00101 0 0 1000 0001 0 1 0 1 0100 0 | Rd = Rd + 1
011100000 | ADC Rd, Rs:                    | 00000 0011 00101 0 0 1000 1000 0 1 0 0 0110 1 |
011100001 | (ADC Rd, Rs):                  | 00001 0011 00101 0 0 1000 1000 0 1 0 0 0110 1 | Code ist 4 mal notwendig, da OP11,OP10 auch
011100010 | (ADC Rd, Rs):                  | 00010 0011 00101 0 0 1000 1000 0 1 0 0 0110 1 | für Einsprung in Mikroprogramm verwendet
011100011 | (ADC Rd, Rs):                  | 00011 0011 00101 0 0 1000 1000 0 1 0 0 0110 1 | wird
011100100 | no int:                        | 00100 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
011100101 | int:                           | 00101 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
011100110 |                                |                                               |
011100111 |                                |                                               |
011101000 |                                |                                               |
011101001 |                                |                                               |
011101010 |                                |                                               |
011101011 |                                |                                               |
011101100 |                                |                                               |
011101101 |                                |                                               |
011101110 |                                |                                               |
011101111 |                                |                                               |
011110000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
011110001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
011110010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
011110011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
011110100 |                                |                                               |
011110101 |                                |                                               |
011110110 |                                |                                               |
011110111 |                                |                                               |
011111000 |                                |                                               |
011111001 |                                |                                               |
011111010 |                                |                                               |
011111011 |                                |                                               |
011111100 |                                |                                               |
011111101 |                                |                                               |
011111110 |                                |                                               |
011111111 |                                |                                               |
100000000 | SUB Rd, Rs: MOV R6,Rs          | 00000 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
100000001 | (SUB Rd, Rs): MOV R6,Rs        | 00001 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | Code ist 4 mal notwendig, da OP11,OP10 auch
100000010 | (SUB Rd, Rs): MOV R6,Rs        | 00010 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | für Einsprung in Mikroprogramm verwendet
100000011 | (SUB Rd, Rs): MOV R6,Rs        | 00011 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | wird
100000100 | COM R6                         | 00100 0000 00101 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
100000101 | ADD Rd,R6,1                    | 00101 0011 00111 0 0 1000 0110 0 1 0 0 0101 1 | Rd = Rd + ~Rs + 1 = Rd - Rs
100000110 | no int:                        | 00110 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
100000111 | int:                           | 00111 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
100001000 |                                |                                               |
100001001 |                                |                                               |
100001010 |                                |                                               |
100001011 |                                |                                               |
100001100 |                                |                                               |
100001101 |                                |                                               |
100001110 |                                |                                               |
100001111 |                                |                                               |
100010000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100010001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100010010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100010011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100010100 |                                |                                               |
100010101 |                                |                                               |
100010110 |                                |                                               |
100010111 |                                |                                               |
100011000 |                                |                                               |
100011001 |                                |                                               |
100011010 |                                |                                               |
100011011 |                                |                                               |
100011100 |                                |                                               |
100011101 |                                |                                               |
100011110 |                                |                                               |
100011111 |                                |                                               |
100100000 | AND Rd, Rs: MOV R6,Rs          | 00000 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
100100001 | AND Rd, Rs: MOV R6,Rs          | 00001 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | Code ist 4 mal notwendig, da OP11,OP10 auch
100100010 | AND Rd, Rs: MOV R6,Rs          | 00010 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | für Einsprung in Mikroprogramm verwendet
100100011 | AND Rd, Rs: MOV R6,Rs          | 00011 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | wird
100100100 | MOV R7,Rd                      | 00100 0000 00101 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
100100101 | COM R7                         | 00101 0000 00110 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~Rd
100100110 | COM R6                         | 00110 0000 00111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
100100111 | NOR R7,R6                      | 00111 0000 01000 0 0 0111 0110 0 1 0 0 0010 1 | R7 = ~Rd NOR ~Rs = Rd AND Rs
100101000 | MOV Rd,R7                      | 01000 0011 01011 0 0 1000 0111 0 1 0 0 1100 0 | Rd = Rd AND Rs
100101001 | frei                           | 01001 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 |
100101010 | no int:                        | 01010 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
100101011 | int:                           | 01011 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
100101100 |                                |                                               |
100101101 |                                |                                               |
100101110 |                                |                                               |
100101111 |                                |                                               |
100110000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100110001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100110010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100110011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
100110100 |                                |                                               |
100110101 |                                |                                               |
100110110 |                                |                                               |
100110111 |                                |                                               |
100111000 |                                |                                               |
100111001 |                                |                                               |
100111010 |                                |                                               |
100111011 |                                |                                               |
100111100 |                                |                                               |
100111101 |                                |                                               |
100111110 |                                |                                               |
100111111 |                                |                                               |
101000000 | OR Rd, Rs: MOV R7,Rd           | 00000 0000 00100 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
101000001 | (OR Rd, Rs): MOV R7,Rd         | 00001 0000 00100 0 0 1000 0111 1 1 0 0 0001 0 | Code ist 4 mal notwendig, da OP11,OP10 auch
101000010 | (OR Rd, Rs): MOV R7,Rd         | 00010 0000 00100 0 0 1000 0111 1 1 0 0 0001 0 | für Einsprung in Mikroprogramm verwendet
101000011 | (OR Rd, Rs): MOV R7,Rd         | 00011 0000 00100 0 0 1000 0111 1 1 0 0 0001 0 | wird
101000100 | NOR R7,Rs                      | 00100 0000 00101 0 0 0111 1000 0 1 0 0 0010 0 | R7 = Rd NOR Rs
101000101 | COM R7                         | 00101 0000 00110 0 0 0111 0111 0 1 0 0 0010 1 | R7 = Rd OR Rs
101000110 | MOV Rd,R7                      | 00110 0011 01001 0 0 1000 0111 0 1 0 0 1100 0 | Rd = Rd OR Rs
101000111 |                                | 00111 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 | frei
101001000 | no int:                        | 01000 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
101001001 | int:                           | 01001 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
100101010 |                                |                                               |
100101011 |                                |                                               |
100101100 |                                |                                               |
100101101 |                                |                                               |
100101110 |                                |                                               |
100101111 |                                |                                               |
101010000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101010001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101010010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101010011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101010100 |                                |                                               |
101010101 |                                |                                               |
101010110 |                                |                                               |
101010111 |                                |                                               |
101011000 |                                |                                               |
101011001 |                                |                                               |
101011010 |                                |                                               |
101011011 |                                |                                               |
101011100 |                                |                                               |
101011101 |                                |                                               |
101011110 |                                |                                               |
101011111 |                                |                                               |
101100000 | MUL Rd, Rs: MOV R6,Rs          | 00000 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | B = R6 = Rs (A = Rd)
101100001 | (MUL Rd, Rs): MOV R6,Rs        | 00001 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | Code ist 4 mal notwendig, da OP11,OP10 auch
101100010 | (MUL Rd, Rs): MOV R6,Rs        | 00010 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | für Einsprung in Mikroprogramm verwendet
101100011 | (MUL Rd, Rs): MOV R6,Rs        | 00011 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | wird
101100100 | MOV R7,0                       | 00100 0000 00101 0 0 0111 0000 0 1 0 1 1100 1 | R7 = Ergebnis, initialisieren; CF loeschen
101100101 | LSR Rd / JC 7                  | 00101 0010 00110 0 0 1000 0000 0 1 0 0 1000 0 | A nach rechts schieben / war A[0] == 1?
101100110 | TST Rd / JZ 9                  | 00110 0010 01001 0 0 1000 0000 0 0 0 0 0001 0 | wenn A == 0, dann fertig
101100111 | ADD R7, R6 / JMP 6             | 00111 0000 00110 0 0 0111 0110 0 1 0 0 0000 1 | A[0] war 1 => B zum Ergebnis add., Ueberlauf festh.
101101000 | LSL R6 / JMP 5                 | 01000 0000 00101 0 0 0110 0110 0 1 0 0 0000 1 | B nach links schieben, Ueberlauf festhalten
101101001 | MOV Rd,R7                      | 01001 0011 01011 0 0 1000 0111 0 1 0 0 1110 1 | ZF und NF setzen, Ueberlauf festhalten
101101010 | no int:                        | 01010 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
101101011 | int:                           | 01011 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
101101100 |                                |                                               |
101101101 |                                |                                               |
101101110 |                                |                                               |
101101111 |                                |                                               |
101110000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101110001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101110010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101110011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
101110100 |                                |                                               |
101110101 |                                |                                               |
101110110 |                                |                                               |
101110111 |                                |                                               |
101111000 |                                |                                               |
101111001 |                                |                                               |
101111010 |                                |                                               |
101111011 |                                |                                               |
101111100 |                                |                                               |
101111101 |                                |                                               |
101111110 |                                |                                               |
101111111 |                                |                                               |
110000000 | DIV Rd, Rs: MOV R6,Rs / JZ 5   | 00000 0010 00101 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
110000001 | (DIV Rd, Rs): MOV R6,Rs / JZ 5 | 00001 0010 00101 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
110000010 | (DIV Rd, Rs): MOV R6,Rs / JZ 5 | 00010 0010 00101 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
110000011 | (DIV Rd, Rs): MOV R6,Rs / JZ 5 | 00011 0010 00101 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
110000100 | MOV R7,0 / JMP 6               | 00100 0000 00110 0 0 0111 0000 0 1 0 1 1100 1 | R7 = Ergebnis, initialisieren
110000101 | /0: MOV R7,-1 / JMP 12         | 00101 0000 01100 0 0 0111 1111 0 1 0 1 1100 0 | n/0 = 255
110000110 | COM R6                         | 00110 0000 00111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
110000111 | loop: ADD Rd,R6,1 / JC 9       | 00111 0010 01000 0 0 1000 0110 0 1 0 0 0101 0 | Rd = Rd - Rs / Überlauf = fertig?
110001000 | INC R7 / JMP 7                 | 01000 0000 00111 0 0 0111 0001 0 1 0 1 0100 1 | Subtraktionen zählen
110001001 | MOV Rd,R7                      | 01001 0011 01011 0 0 1000 0111 0 1 0 0 1100 0 | fertig, Rd = R7 = Ergebnis
110001010 | fertig: no int:                | 01010 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
110001011 | int:                           | 01011 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
110001100 | SETC / JMP 9                   | 01100 0000 01001 0 0 0000 0111 0 0 0 0 1101 1 | n/0: Carry setzen
110001101 |                                |                                               |
110001110 |                                |                                               |
110001111 |                                |                                               |
110010000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110010001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110010010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110010011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110010100 |                                |                                               |
110010101 |                                |                                               |
110010110 |                                |                                               |
110010111 |                                |                                               |
110011000 |                                |                                               |
110011001 |                                |                                               |
110011010 |                                |                                               |
110011011 |                                |                                               |
110011100 |                                |                                               |
110011101 |                                |                                               |
110011110 |                                |                                               |
110011111 |                                |                                               |
110100000 | XOR Rd, Rs: MOV R6,Rs          | 00000 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | R6 = Rs
110100001 | XOR Rd, Rs: MOV R6,Rs          | 00001 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | Code ist 4 mal notwendig, da OP11,OP10 auch
110100010 | XOR Rd, Rs: MOV R6,Rs          | 00010 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | für Einsprung in Mikroprogramm verwendet
110100011 | XOR Rd, Rs: MOV R6,Rs          | 00011 0000 00100 0 0 0110 1000 0 1 0 0 1100 0 | wird
110100100 | MOV R7,Rd                      | 00100 0000 00101 0 0 1000 0111 1 1 0 0 0001 0 | R7 = Rd
110100101 | COM R7                         | 00101 0000 00110 0 0 0111 0111 0 1 0 0 0010 0 | R7 = ~Rd
110100110 | COM R6                         | 00110 0000 00111 0 0 0110 0110 0 1 0 0 0010 0 | R6 = ~Rs
110100111 | NOR R7,R6                      | 00111 0000 01000 0 0 0111 0110 0 1 0 0 0010 0 | R7 = ~Rd NOR ~Rs = Rd AND Rs
110101000 | NOR Rd,Rs                      | 01000 0000 01001 0 0 1000 1000 0 1 0 0 0010 0 | Rd = Rd NOR Rs
110101001 | NOR Rd, R7                     | 01001 0011 01011 0 0 1000 0111 0 1 0 0 0010 1 | Rd = (Rd NOR Rs) NOR (Rd AND Rs)
110101010 | no int:                        | 01010 1101 00000 0 1 0011 0001 0 1 0 1 0100 0 | next opcode, PC = PC + 1 (PC: R3)
110101011 | int:                           | 01011 0110 10000 0 0 0000 0000 0 0 0 0 1100 0 | jump to 0.16
110101100 |                                |                                               |
110101101 |                                |                                               |
110101110 |                                |                                               |
110101111 |                                |                                               |
110110000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110110001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110110010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110110011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
110110100 |                                |                                               |
110110101 |                                |                                               |
110110110 |                                |                                               |
110110111 |                                |                                               |
110111000 |                                |                                               |
110111001 |                                |                                               |
110111010 |                                |                                               |
110111011 |                                |                                               |
110111100 |                                |                                               |
110111101 |                                |                                               |
110111110 |                                |                                               |
110111111 |                                |                                               |
111000000 | - unbekannter opcode -         | 00000 0000 00000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111000001 | - unbekannter opcode -         | 00001 0000 00001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111000010 | - unbekannter opcode -         | 00010 0000 00010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111000011 | - unbekannter opcode -         | 00011 0000 00011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111000100 |                                |                                               |
111000101 |                                |                                               |
111000110 |                                |                                               |
111000111 |                                |                                               |
111001000 |                                |                                               |
111001001 |                                |                                               |
111001010 |                                |                                               |
111001011 |                                |                                               |
111001100 |                                |                                               |
111001101 |                                |                                               |
111001110 |                                |                                               |
111001111 |                                |                                               |
111010000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111010001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111010010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111010011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111010100 |                                |                                               |
111010101 |                                |                                               |
111010110 |                                |                                               |
111010111 |                                |                                               |
111011000 |                                |                                               |
111011001 |                                |                                               |
111011010 |                                |                                               |
111011011 |                                |                                               |
111011100 |                                |                                               |
111011101 |                                |                                               |
111011110 |                                |                                               |
111011111 |                                |                                               |
111100000 | Rs: MOV R6,Rs                  | 00000 0000 00110 0 0 1000 0110 1 1 0 0 0001 0 | R6 = Rs
111100001 | (Rs): MOV R6,(Rs)              | 00001 0000 00110 0 1 1000 0110 1 1 1 0 0001 0 | R6 = (Rs)
111100010 | (Rs+): MOV R6,(Rs)             | 00010 0000 00101 0 1 1000 0110 1 1 1 0 0001 0 | R6 = (Rs)
111100011 | ((Rs+)): MOV R7,(Rs)           | 00011 0000 00100 0 1 1000 0111 1 1 1 0 0001 0 | R7 = (Rs)
111100100 | MOV R6,(R7)                    | 00100 0000 00101 0 1 0111 0110 1 1 1 0 0001 0 | R6 = (R7) = ((Rs))
111100101 | INC Rs                         | 00101 0000 00110 0 0 1000 0001 0 1 0 1 0100 0 |
111100110 | zweiter opcode                 | 00110 0101 10000 0 1 0011 0001 0 1 0 1 0100 0 | jump to op.16
111100111 |                                |                                               |
111101000 |                                |                                               |
111101001 |                                |                                               |
111101010 |                                |                                               |
111101011 |                                |                                               |
111101100 |                                |                                               |
111101101 |                                |                                               |
111101110 |                                |                                               |
111101111 |                                |                                               |
111110000 | - unbekannter opcode -         | 10000 0000 10000 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111110001 | - unbekannter opcode -         | 10001 0000 10001 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111110010 | - unbekannter opcode -         | 10010 0000 10010 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111110011 | - unbekannter opcode -         | 10011 0000 10011 0 0 0000 0000 0 0 0 0 1100 0 | infinite loop
111110100 |                                |                                               |
111110101 |                                |                                               |
111110110 |                                |                                               |
111110111 |                                |                                               |
111111000 |                                |                                               |
111111001 |                                |                                               |
111111010 |                                |                                               |
111111011 |                                |                                               |
111111100 |                                |                                               |
111111101 |                                |                                               |
111111110 |                                |                                               |
111111111 |                                |                                               |
